{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","Object.assign = Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n","import './object-assign-polyfill';\n\nimport PropTypes from 'prop-types';\nimport React, { Component }  from 'react'\nimport ReactDOM from 'react-dom'\nimport mask from './mask.js'\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n    constructor(props) {\n        super(props);\n        this.prepareProps = this.prepareProps.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.setSelectionRange = this.setSelectionRange.bind(this);\n        this.state = this.prepareProps(this.props);\n\n        this.inputSelectionStart = 1;\n        this.inputSelectionEnd = 1;\n    }\n\n\n    /**\n     * Exposes the current masked value.\n     *\n     * @returns {String}\n     */\n    getMaskedValue() {\n        return this.state.maskedValue;\n    }\n\n\n    /**\n     * General function used to cleanup and define the final props used for rendering\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n     */\n    prepareProps(props) {\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\n        delete customProps.onChange;\n        delete customProps.onChangeEvent;\n        delete customProps.value;\n        delete customProps.decimalSeparator;\n        delete customProps.thousandSeparator;\n        delete customProps.precision;\n        delete customProps.inputType;\n        delete customProps.allowNegative;\n        delete customProps.allowEmpty;\n        delete customProps.prefix;\n        delete customProps.suffix;\n        delete customProps.selectAllOnFocus;\n        delete customProps.autoFocus;\n\n        let initialValue = props.value;\n        if (initialValue === null) {\n            initialValue = props.allowEmpty? null : '';\n        }else{\n\n            if (typeof initialValue == 'string') {\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n                // Now they have two problems.\n\n                // Strip out thousand separators, prefix, and suffix, etc.\n                if (props.thousandSeparator === \".\"){\n                    // special handle the . thousand separator\n                    initialValue = initialValue.replace(/\\./g, '');\n                }\n\n                if (props.decimalSeparator != \".\"){\n                    // fix the decimal separator\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n                }\n\n                //Strip out anything that is not a digit, -, or decimal separator\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n                // now we can parse.\n                initialValue = Number.parseFloat(initialValue);\n            }\n            initialValue = Number(initialValue).toLocaleString(undefined, {\n                style                : 'decimal',\n                minimumFractionDigits: props.precision,\n                maximumFractionDigits: props.precision\n            })\n\n        }\n\n        const { maskedValue, value } = mask(\n            initialValue,\n            props.precision,\n            props.decimalSeparator,\n            props.thousandSeparator,\n            props.allowNegative,\n            props.prefix,\n            props.suffix\n        );\n\n        return { maskedValue, value, customProps };\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\n     *\n     * @param nextProps\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.prepareProps(nextProps));\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n     */\n    componentDidMount(){\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let selectionStart, selectionEnd;\n\n        if (this.props.autoFocus) {\n            this.theInput.focus();\n            selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        } else {\n            selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n            selectionStart = Math.min(node.selectionStart, selectionEnd);\n        }\n\n        this.setSelectionRange(node, selectionStart, selectionEnd);\n    }\n\n\n    /**\n     * Component lifecycle function\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n     */\n    componentWillUpdate() {\n        let node = ReactDOM.findDOMNode(this.theInput);\n        this.inputSelectionStart = node.selectionStart;\n        this.inputSelectionEnd = node.selectionEnd;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n     */\n    componentDidUpdate(prevProps, prevState){\n        const { decimalSeparator } = this.props;\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n        let separatorsRegex = new RegExp(decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n        selectionEnd = selectionEnd + adjustment;\n        selectionStart = selectionStart + adjustment;\n\n        const precision = Number(this.props.precision);\n\n        let baselength = this.props.suffix.length\n            + this.props.prefix.length\n            + (precision > 0 ? decimalSeparator.length : 0) // if precision is 0 there will be no decimal part\n            + precision\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n        if (this.state.maskedValue.length == baselength){\n            // if we are already at base length, position the cursor at the end.\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        }\n\n        this.setSelectionRange(node, selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n    /**\n     * Set selection range only if input is in focused state\n     * @param node DOMElement\n     * @param start number\n     * @param end number\n     */\n    setSelectionRange(node, start, end) {\n      if (document.activeElement === node) {\n        node.setSelectionRange(start, end);\n      }\n    }\n\n\n    /**\n     * onChange Event Handler\n     * @param event\n     */\n    handleChange(event) {\n        event.preventDefault();\n        let { maskedValue, value } = mask(\n            event.target.value,\n            this.props.precision,\n            this.props.decimalSeparator,\n            this.props.thousandSeparator,\n            this.props.allowNegative,\n            this.props.prefix,\n            this.props.suffix\n        );\n\n        event.persist();  // fixes issue #23\n\n        this.setState({ maskedValue, value }, () => {\n            this.props.onChange(maskedValue, value, event);\n            this.props.onChangeEvent(event, maskedValue, value);\n        });\n    }\n\n\n    /**\n     * onFocus Event Handler\n     * @param event\n     */\n    handleFocus(event) {\n        if (!this.theInput) return;\n\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    handleBlur(event) {\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\n     */\n    render() {\n        return (\n            <input\n                ref={(input) => { this.theInput = input; }}\n                type={this.props.inputType}\n                value={this.state.maskedValue}\n                onChange={this.handleChange}\n                onFocus={this.handleFocus}\n                onMouseUp={this.handleFocus}\n                {...this.state.customProps}\n            />\n        )\n    }\n}\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    decimalSeparator: PropTypes.string,\n    thousandSeparator: PropTypes.string,\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    allowNegative: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    prefix: PropTypes.string,\n    suffix: PropTypes.string,\n    selectAllOnFocus: PropTypes.bool\n};\n\n\nCurrencyInput.defaultProps = {\n    onChange: function(maskValue, value, event) {/*no-op*/},\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n    autoFocus: false,\n    value: '0',\n    decimalSeparator: '.',\n    thousandSeparator: ',',\n    precision: '2',\n    inputType: 'text',\n    allowNegative: false,\n    prefix: '',\n    suffix: '',\n    selectAllOnFocus: false\n};\n\n\nexport default CurrencyInput\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","key","source","prototype","hasOwnProperty","call","parseFloat","Component","getMaskedValue","this","state","CurrencyInput","prepareProps","props","customProps","initialValue","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","autoFocus","replace","RegExp","toLocaleString","undefined","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","selectionEnd","node","ReactDOM","findDOMNode","theInput","selectionStart","focus","Math","min","setSelectionRange","componentWillUpdate","inputSelectionStart","inputSelectionEnd","componentDidUpdate","prevProps","prevState","isNegative","minPos","max","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","baselength","start","end","document","activeElement","handleChange","event","preventDefault","persist","handleFocus","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","super","bind","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}